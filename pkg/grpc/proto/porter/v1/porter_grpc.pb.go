// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package porterGRPC

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PorterServiceClient is the client API for PorterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PorterServiceClient interface {
	Install(ctx context.Context, in *IntallRequest, opts ...grpc.CallOption) (PorterService_InstallClient, error)
	Upgrade(ctx context.Context, in *UpgradeRequest, opts ...grpc.CallOption) (PorterService_UpgradeClient, error)
	UnInstall(ctx context.Context, in *UnIntallRequest, opts ...grpc.CallOption) (PorterService_UnInstallClient, error)
	Execute(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (PorterService_ExecuteClient, error)
}

type porterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPorterServiceClient(cc grpc.ClientConnInterface) PorterServiceClient {
	return &porterServiceClient{cc}
}

func (c *porterServiceClient) Install(ctx context.Context, in *IntallRequest, opts ...grpc.CallOption) (PorterService_InstallClient, error) {
	stream, err := c.cc.NewStream(ctx, &PorterService_ServiceDesc.Streams[0], "/porterGRPC.PorterService/Install", opts...)
	if err != nil {
		return nil, err
	}
	x := &porterServiceInstallClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PorterService_InstallClient interface {
	Recv() (*IntallResponse, error)
	grpc.ClientStream
}

type porterServiceInstallClient struct {
	grpc.ClientStream
}

func (x *porterServiceInstallClient) Recv() (*IntallResponse, error) {
	m := new(IntallResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *porterServiceClient) Upgrade(ctx context.Context, in *UpgradeRequest, opts ...grpc.CallOption) (PorterService_UpgradeClient, error) {
	stream, err := c.cc.NewStream(ctx, &PorterService_ServiceDesc.Streams[1], "/porterGRPC.PorterService/Upgrade", opts...)
	if err != nil {
		return nil, err
	}
	x := &porterServiceUpgradeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PorterService_UpgradeClient interface {
	Recv() (*UpgradeResponse, error)
	grpc.ClientStream
}

type porterServiceUpgradeClient struct {
	grpc.ClientStream
}

func (x *porterServiceUpgradeClient) Recv() (*UpgradeResponse, error) {
	m := new(UpgradeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *porterServiceClient) UnInstall(ctx context.Context, in *UnIntallRequest, opts ...grpc.CallOption) (PorterService_UnInstallClient, error) {
	stream, err := c.cc.NewStream(ctx, &PorterService_ServiceDesc.Streams[2], "/porterGRPC.PorterService/UnInstall", opts...)
	if err != nil {
		return nil, err
	}
	x := &porterServiceUnInstallClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PorterService_UnInstallClient interface {
	Recv() (*UnIntallResponse, error)
	grpc.ClientStream
}

type porterServiceUnInstallClient struct {
	grpc.ClientStream
}

func (x *porterServiceUnInstallClient) Recv() (*UnIntallResponse, error) {
	m := new(UnIntallResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *porterServiceClient) Execute(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (PorterService_ExecuteClient, error) {
	stream, err := c.cc.NewStream(ctx, &PorterService_ServiceDesc.Streams[3], "/porterGRPC.PorterService/Execute", opts...)
	if err != nil {
		return nil, err
	}
	x := &porterServiceExecuteClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PorterService_ExecuteClient interface {
	Recv() (*ExecuteResponse, error)
	grpc.ClientStream
}

type porterServiceExecuteClient struct {
	grpc.ClientStream
}

func (x *porterServiceExecuteClient) Recv() (*ExecuteResponse, error) {
	m := new(ExecuteResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PorterServiceServer is the server API for PorterService service.
// All implementations should embed UnimplementedPorterServiceServer
// for forward compatibility
type PorterServiceServer interface {
	Install(*IntallRequest, PorterService_InstallServer) error
	Upgrade(*UpgradeRequest, PorterService_UpgradeServer) error
	UnInstall(*UnIntallRequest, PorterService_UnInstallServer) error
	Execute(*ExecuteRequest, PorterService_ExecuteServer) error
}

// UnimplementedPorterServiceServer should be embedded to have forward compatible implementations.
type UnimplementedPorterServiceServer struct {
}

func (UnimplementedPorterServiceServer) Install(*IntallRequest, PorterService_InstallServer) error {
	return status.Errorf(codes.Unimplemented, "method Install not implemented")
}
func (UnimplementedPorterServiceServer) Upgrade(*UpgradeRequest, PorterService_UpgradeServer) error {
	return status.Errorf(codes.Unimplemented, "method Upgrade not implemented")
}
func (UnimplementedPorterServiceServer) UnInstall(*UnIntallRequest, PorterService_UnInstallServer) error {
	return status.Errorf(codes.Unimplemented, "method UnInstall not implemented")
}
func (UnimplementedPorterServiceServer) Execute(*ExecuteRequest, PorterService_ExecuteServer) error {
	return status.Errorf(codes.Unimplemented, "method Execute not implemented")
}

// UnsafePorterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PorterServiceServer will
// result in compilation errors.
type UnsafePorterServiceServer interface {
	mustEmbedUnimplementedPorterServiceServer()
}

func RegisterPorterServiceServer(s grpc.ServiceRegistrar, srv PorterServiceServer) {
	s.RegisterService(&PorterService_ServiceDesc, srv)
}

func _PorterService_Install_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(IntallRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PorterServiceServer).Install(m, &porterServiceInstallServer{stream})
}

type PorterService_InstallServer interface {
	Send(*IntallResponse) error
	grpc.ServerStream
}

type porterServiceInstallServer struct {
	grpc.ServerStream
}

func (x *porterServiceInstallServer) Send(m *IntallResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _PorterService_Upgrade_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UpgradeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PorterServiceServer).Upgrade(m, &porterServiceUpgradeServer{stream})
}

type PorterService_UpgradeServer interface {
	Send(*UpgradeResponse) error
	grpc.ServerStream
}

type porterServiceUpgradeServer struct {
	grpc.ServerStream
}

func (x *porterServiceUpgradeServer) Send(m *UpgradeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _PorterService_UnInstall_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UnIntallRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PorterServiceServer).UnInstall(m, &porterServiceUnInstallServer{stream})
}

type PorterService_UnInstallServer interface {
	Send(*UnIntallResponse) error
	grpc.ServerStream
}

type porterServiceUnInstallServer struct {
	grpc.ServerStream
}

func (x *porterServiceUnInstallServer) Send(m *UnIntallResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _PorterService_Execute_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExecuteRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PorterServiceServer).Execute(m, &porterServiceExecuteServer{stream})
}

type PorterService_ExecuteServer interface {
	Send(*ExecuteResponse) error
	grpc.ServerStream
}

type porterServiceExecuteServer struct {
	grpc.ServerStream
}

func (x *porterServiceExecuteServer) Send(m *ExecuteResponse) error {
	return x.ServerStream.SendMsg(m)
}

// PorterService_ServiceDesc is the grpc.ServiceDesc for PorterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PorterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "porterGRPC.PorterService",
	HandlerType: (*PorterServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Install",
			Handler:       _PorterService_Install_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Upgrade",
			Handler:       _PorterService_Upgrade_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UnInstall",
			Handler:       _PorterService_UnInstall_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Execute",
			Handler:       _PorterService_Execute_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "porter/v1/porter.proto",
}
